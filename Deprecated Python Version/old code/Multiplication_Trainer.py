import random
import winsound
import numpy

# About: Great clean buzz sound generated by tone repetition.
# Title: Buzz
# Uploaded: 11.23.09
# License: Attribution 3.0
# Recorded by Mike Koenig
# File Size: 91 KB
# Downloads: 60746

# Creacion de matriz 12*12 con las respuestas de las tablas de multiplicar.
tablas_de_multiplicar = numpy.zeros((12,12),int)
for x in range (12):
    for y in range (12):
        tablas_de_multiplicar[x][y] = (x+1)*(y+1)

# Cargar el numero de aciertos y si no encuentra el archivo lo crea y lo establece en 0
try:
    aciertos = numpy.load("aciertos.dat")
except FileNotFoundError:
    aciertos = numpy.zeros(1,int)
    aciertos.dump("aciertos.dat")

# Cargar el numero de fallos y si no existe crearlo con el valor de 0
try:
    fallos = numpy.load("fallos.dat")
except FileNotFoundError:
    fallos = numpy.zeros(1,int)
    fallos.dump("fallos.dat")

# cargar matriz previa de confidence y si no existe crearlo
try:
    confianza = numpy.load("confianza.dat")
except FileNotFoundError:
    confianza = numpy.full((12, 12), 1, int)
    confianza.dump("confianza.dat")

# Carga de el valor historico ( numero de ejercicios ) y si no existe crearlo.
try:
    historico = numpy.load("historico.dat")
except FileNotFoundError:
    historico = numpy.zeros(1,int)
    historico.dump("historico.dat")


# funcion para negar entradas por teclado vacias
def entrada(variable):
    input_loop = True
    while input_loop == True:
        try:
            variable = int(input(">>>"))
            input_loop = False
        except ValueError:
            print("Error! Numero Invalido!, Intente de nuevo:")
    return(variable)

# funcion para verificar la respuesta y contar el acierto
def revisar(respuesta,checkX,checkY):
    if respuesta == tablas_de_multiplicar[checkX][checkY]:
        confianza[checkX][checkY] = confianza[checkX][checkY] + 1
        print("CORRECTO!")
        winsound.PlaySound("ding.wav", winsound.SND_ASYNC)
        global aciertos
        aciertos = aciertos + 1
    else:
        print("NOO! ERA ", tablas_de_multiplicar[checkX][checkY])
        winsound.PlaySound("buzz.wav", winsound.SND_ASYNC)
        if confianza[checkX][checkY] > 1:
            confianza[checkX][checkY] = confianza[checkX][checkY] - 1
        global fallos
        fallos = fallos + 1





# hacemos que el historico determine highlight, es decir la probabilidad para randomness que sea aleatorio o de repaso
if historico >= 0 or historico < 288:
    highlight = 10000
elif historico >=288 or historico > 576:
    highlight = 9000
elif historico >= 576 or historico < 1152:
    highlight = 8000
elif historico >= 1152 or historico < 2304:
    highlight = 7000
elif historico >= 2304 or historico < 4608:
    highlight = 6000
elif historico >= 4608 or historico < 9216:
    highlight = 5000
elif historico >= 9216 or historico < 18432:
    highlight = 4000
elif historico >= 18432 or historico < 36864:
    highlight = 3000
elif historico >= 36864:
    highlight = 2000
else:
    print("Error en la logica interna, el valor historico no es valido! ¿Será negativo?")
# print("Debug, historico=",historico[0])
# print("Debug, highlight=",highlight)
# print(tablas_de_multiplicar)
# print(confianza)



while True:
    print(" ")
    print("El entrenador de multiplicar 1.0")
    print("1--Practicar Multiplicaciones")
    print("2--Salir y Guardar")
    print("3--Ver Estadisticas")

    seleccion = None
    seleccion = entrada(seleccion)


    if seleccion == 1:
        print("¿Cuantos problemas desea repasar?")
        problemas = None
        problemas = entrada(problemas)

        for problemas in range(0,problemas):
            randomness = random.randint(1, 10000)
            if randomness <= highlight:
                # random exercise
                x = random.randint(1, 12)
                y = random.randint(1, 12)

                print(" ")
                print(x, " * ", y, " = ?")

                respuesta = None
                respuesta = entrada(respuesta)

                revisar(respuesta,x-1,y-1)
                historico[0] = historico[0] + 1
            else:
                # review exercise
                factores = numpy.unravel_index(numpy.argmin(confianza), confianza.shape)

                print(" ")
                print(factores[0]+1, " * ", factores[1]+1, " = ?")

                respuesta = None
                respuesta = entrada(respuesta)
                revisar(respuesta, factores[0], factores[1])
                historico[0] = historico[0] + 1


    elif seleccion == 2:
        print(" ")
        print("Guardando resultados...")
        confianza.dump("confianza.dat")
        historico.dump("historico.dat")
        aciertos.dump("aciertos.dat")
        fallos.dump("fallos.dat")
        print("Guardado exitoso!")
        break
    elif seleccion == 3:
        print(" ")
        print("Total historico de ejercicios realizados: ",historico)
        print("Total historico de aciertos: ",aciertos)
        print("Total historico de fallos: ",fallos)
        print(" ")


    else:
        print("Porfavor seleccione 1 o 2 en el teclado numerico")